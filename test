#include <raylib.h>
#include "game.h"
#include "colors.h"
#include <iostream>
#include "single_player.h"
#include "position.h"
#include <memory>
double lastUpdateTime = 0;

bool EventTriggered(double interval){
    double currentTime = GetTime();
    if (currentTime - lastUpdateTime >= interval)
    {
        lastUpdateTime = currentTime;
        return true;
    }
    return false;
}

int ShowTitleScreen() {
    int mode = 0;
    while (!WindowShouldClose()) {
        BeginDrawing();
        ClearBackground(BLACK);
        DrawText("TETRIS", 150, 100, 50, WHITE);
        DrawText("Press 1 for Single Player", 100, 200, 20, WHITE);
        DrawText("Press 2 for Two Players", 100, 250, 20, WHITE);
        EndDrawing();

        if (IsKeyPressed(KEY_ONE)) {
            mode = 1;
            break;
        } else if (IsKeyPressed(KEY_TWO)) {
            mode = 2;
            break;
        }
    }
    return mode;
}

int main(){
    InitWindow(500, 620, "Tetris");
    SetTargetFPS(60);
    int mode = ShowTitleScreen();
    std::unique_ptr<Player> player;
    if (mode == 1) 
        player = std::make_unique<SinglePlayer>();
    else if (mode == 2) {
        // player = std::make_unique<TwoPlayer>();
    }
    Font font = LoadFontEx("Font/Handjet.ttf", 64, 0, 0);

    while (WindowShouldClose() == false){
        player->HandleInput();
        if (EventTriggered(0.2)) 
             player->Update();

        BeginDrawing();
        ClearBackground(BLACK);
        DrawTextEx(font, "Score", {365, 15}, 38, 2, WHITE);
        DrawTextEx(font, "Next", {370, 175}, 38, 2, WHITE);
        if (player->IsGameOver())
            DrawTextEx(font, "GAME OVER", {320, 450}, 38, 2, WHITE);

        DrawRectangleRounded({320, 55, 170, 60}, 0.3, 6, darkGrey);
        char scoreText[10];
        sprintf(scoreText, "%d", player->getScore());
        Vector2 textSize = MeasureTextEx(font, scoreText, 38, 2);

        DrawTextEx(font, scoreText, {320 + (170 - textSize.x) / 2, 65}, 38, 2, WHITE);
        DrawRectangleRounded({320, 215, 170, 180}, 0.3, 6, darkGrey);
        player->Draw();
        EndDrawing();
    }

    CloseWindow();
}

------
brach 2
// [src/main.cpp](src/main.cpp)
#include <raylib.h>
#include "game.h"
#include "colors.h"
#include <iostream>
#include "single_player.h"
#include "two_player.h"
#include <memory> // For std::unique_ptr
#include <stdexcept>
 // For exception handling
double lastUpdateTime = 0;
bool EventTriggered(double interval){
    double currentTime = GetTime();
    if (currentTime - lastUpdateTime >= interval)
    {
        lastUpdateTime = currentTime;
        return true;
    }
    return false;
}
int ShowTitleScreen() {
    int mode = 0;
    while (!WindowShouldClose()) {
        BeginDrawing();
        ClearBackground(BLACK);
        DrawText("TETRIS", 150, 100, 50, WHITE);
        DrawText("Press 1 for Single Player", 100, 200, 20, WHITE);
        DrawText("Press 2 for Two Players", 100, 250, 20, WHITE);
        EndDrawing();

        if (IsKeyPressed(KEY_ONE)) {
            mode = 1;
            break;
        } else if (IsKeyPressed(KEY_TWO)) {
            mode = 2;
            break;
        }
    }
    return mode;
}


int main() {
    try {
        InitWindow(500, 620, "Tetris");
        SetTargetFPS(60);
        InitAudioDevice();
        int mode = ShowTitleScreen();

        std::unique_ptr<Player> game;
        if (mode == 1) {
            game = std::make_unique<SinglePlayer>();
        } else if (mode == 2) {
            SetWindowSize(1000, 620); // Adjust window size for two-player mode
            game = std::make_unique<TwoPlayer>();
        } else {
            throw std::runtime_error("Invalid game mode selected.");
        }
        while (!WindowShouldClose()) {
            // Music music = LoadMusicStream("Sounds/music.mp3");
            // UpdateMusicStream(music);
            game->HandleInput();
            if (EventTriggered(0.2)) {
                game->Update();
            }

            BeginDrawing();
            ClearBackground(BLACK);
            game->Draw();
            EndDrawing();

            if (game->IsGameOver()) {
                // Handle game over
                BeginDrawing();
                ClearBackground(BLACK);
                Game* winner = dynamic_cast<TwoPlayer*>(game.get())->GetWinner();
                DrawText("Game Over!", 200, 150, 40, RED);
                // DrawText(TextFormat("Winner: Player %d", winner.playerNumber), 200, 220, 30, WHITE);
                DrawText(TextFormat("Score: %d", winner->score), 200, 260, 30, WHITE);
                DrawText("Press ENTER to restart", 200, 320, 20, LIGHTGRAY);
                if (IsKeyPressed(KEY_ENTER)) {
                    game.reset();
                }
                EndDrawing();
                // break;
            }
        }
        game.reset();
        CloseAudioDevice();
        CloseWindow();
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }
    return 0;
}
----
working branch 3
// [src/main.cpp](src/main.cpp)
#include <raylib.h>
#include "game.h"
#include "colors.h"
#include <iostream>
#include "single_player.h"
#include "two_player.h"
#include <memory> // For std::unique_ptr
#include <stdexcept>
 // For exception handling
double lastUpdateTime = 0;
bool EventTriggered(double interval){
    double currentTime = GetTime();
    if (currentTime - lastUpdateTime >= interval)
    {
        lastUpdateTime = currentTime;
        return true;
    }
    return false;
}
int ShowTitleScreen() {
    int mode = 0;
    while (!WindowShouldClose()) {
        BeginDrawing();
        ClearBackground(BLACK);
        DrawText("TETRIS", 150, 100, 50, WHITE);
        DrawText("Press 1 for Single Player", 100, 200, 20, WHITE);
        DrawText("Press 2 for Two Players", 100, 250, 20, WHITE);
        EndDrawing();

        if (IsKeyPressed(KEY_ONE)) {
            mode = 1;
            break;
        } else if (IsKeyPressed(KEY_TWO)) {
            mode = 2;
            break;
        }
    }
    return mode;
}


int main() {
    try {
        InitWindow(500, 620, "Tetris");
        SetTargetFPS(60);
        InitAudioDevice();
        int mode = ShowTitleScreen();

        std::unique_ptr<Player> game;
        if (mode == 1) {
            game = std::make_unique<SinglePlayer>();
        } else if (mode == 2) {
            SetWindowSize(1000, 620); // Adjust window size for two-player mode
            game = std::make_unique<TwoPlayer>();
        } else {
            throw std::runtime_error("Invalid game mode selected.");
        }
        while (!WindowShouldClose()) {
            if (game->IsGameOver()) {
                // Determine the winner
                Game* winner = game->GetWinner();
                winner->DrawGameOverScreen(*winner);
                // Restart mechanism
                if (IsKeyPressed(KEY_ENTER)) {
                    game->Reset();
            }
            } else {
                // Music music = LoadMusicStream("Sounds/music.mp3");
                // UpdateMusicStream(music);
                game->HandleInput();
                if (EventTriggered(0.2)) {
                    game->Update();
                }

                BeginDrawing();
                ClearBackground(BLACK);
                game->Draw();
                EndDrawing();
            } 
        }
        game.reset();
        CloseAudioDevice();
        CloseWindow();
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }
    return 0;  
}

-----
